devtools::check()
library(palmerpenguins)
data("penguins")
my_penguins <- penguins
usethis::use_data(my_penguins)
usethis::use_vignette("tutorial", title = "Project 2: STAT302Package Tutorial")
devtools::check()
devtools::install_github("juanhillon/STAT302Package", build_vignette = TRUE, build_opts = c())
library(STAT#)
library(STAT302Package)
help(package = "STAT302Package", help_type = "html")
help(package = "STAT302Package", help_type = "html")
utils::browseVignettes(package = "STAT302Package")
utils::browseVignettes(package = "STAT302Package")
devtools::document()
devtools::check()
library(gapminder)
data("gapminder")
my_gapminder <- gapminder
usethis::use_data(my_gapminder)
devtools::check()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::checck
devtools::ch
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
utils::browseVignettes(package = "STAT302Package")
devtools::check()
library(STAT302Package)
utils::browseVignettes(package = "STAT302Package")
devtools::install_github("juanhillon/STAT302Package", build_vignette = TRUE, build_opts = c())
library(STAT302Package)
utils::browseVignettes(package = "STAT302Package")
utils::browseVignettes(package = "STAT302Package")
utils::browseVignettes(package = "STAT302Package")
devtools::install_github("juanhillon/STAT302Package")
utils::browseVignettes(package = "STAT302Package")
?my_pow
library(STAT302Package)
?my_pow
devtools::document()
devtools::document()
devtools::document()
?my_pow
?my_t.test
devtools::document()
?my_t.test
devtools::check()
devtools::document()
devtools::check()
devtools::check()
detach("package:stats", unload = TRUE)
library(stats)
devtools::document()
devtools::document()
devtools::check()
utils::browseVignettes(package = "STAT302Package")
devtools::document()
devtools::check()
devtools::document()
devtools::check()
my_t.test(my_gapminder$lifeExp, "less", 60)
devtools::document()
devtools::check()
knitr::opts_chunk$set(echo = TRUE)
#creates random data set
my_data <- rnorm(100, mean = 0, sd = 1)
#creates my_t.test function
my_t.test <- function(x, alternative, mu){
#calculates standard error
std_error <- sd(x) / sqrt(length(x))
#calculates test statistic
test_stat <- (mean(x) - mu) / std_error
#calculates degrees of freedom
df <- length(x) - 1
#find p_val depending on alternative, if no valid alternative, returns error
if(alternative == "less"){
p_val <- pt(test_stat, df, lower.tail = TRUE)
} else if(alternative == "greater"){
p_val <- pt(test_stat, df, lower.tail = FALSE)
} else if (alternative == "two.sided"){
p_val <- pt(abs(test_stat), df, lower.tail = FALSE) +
pt(-1 *abs(test_stat), df, lower.tail = TRUE)
} else {
stop("alternative can only be two.sided, less, or greater")
}
#returns list of variables
return(list(test_stat, df, alternative, p_val))
}
#tests two sided t-test with both functions
t.test(my_data, alternative = "two.sided", mu = 0)
my_t.test(my_data, "two.sided", mu = 0)
#tests one side t-tests with both functions
t.test(my_data, alternative = "less", mu = 0)
my_t.test(my_data, "less", mu = 0)
t.test(my_data, alternative = "greater", mu = 0)
my_t.test(my_data, "greater", mu = 0)
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
usethis::use_test("my_t.test")
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
my_t.test(my_gapminder$lifeExp, "less", mu = 60)
my_t.test(my_gapminder$lifeExp, "less", mu = 60)$p_val
my_t.test(my_gapminder$lifeExp, "less", mu = 60)[4]
my_t.test(my_gapminder$lifeExp, "greater", mu = 60)[4]
my_t.test(my_gapminder$lifeExp, "two.sided", mu = 60)[4]
devtools::check()
my_gapminder$lifeExp, "less", mu = 60)[4]
my_t.test(my_gapminder$lifeExp, "less", mu = 60)[4]
my_t.test(my_gapminder$lifeExp, "less", mu = 60)[4]
devtools::check()
devtools::document()
devtools::check()
my_t.test(my_gapminder$lifeExp, "greater", mu = 60)[1]
devtools::check()
my_t.test(1:10, "less", mu = 5
my_t.test(my_gapminder$lifeExp, "less", mu = 60)
my_t.test(1:10, "less", mu = 5)
devtools::check()
devtools::check()
expect_equal(my_t.test(1:10, "less", mu = 5)[1]
)
(my_t.test(1:10, "less", mu = 5)[1])
testthat::expect_equal((my_t.test(1:10, "less", mu = 5)[1], 0.522233)
testthat::expect_equal((my_t.test(1:10, "less", mu = 5)[1]), 0.522233)
?expect_equal
testthat::expect_equal(my_t.test(1:10, "less", mu = 5)[1], 0.522233, tolerance = 0.1)
testthat::expect_equal(my_t.test(1:10, "less", mu = 5)[1], 0.522233, tolerance = 1)
testthat::expect_equal(my_t.test(1:10, "less", mu = 5)[1], 0.522233, tolerance = 10)
testthat::expect_equal(my_t.test(1:10, "less", mu = 5)[1], 0.522233, tolerance = 0.000000001)
testthat::expect_equal(round(my_t.test(1:10, "less", mu = 5)[1], 6), 0.522233)
my_t.test(1:10, "less", 5)
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
#loads mtcars data set
data(mtcars)
test_data = mtcars
test_formula = mtcars$mpg ~ mtcars$hp
#creates my_lm function
my_lm <- function(formula, data){
#extracts model frame
model_frame <- model.frame(formula, data)
#extracts model matrix x
x <- model.matrix(formula, data = data)
#extracts model response y
y <- model.response(model_frame)
#finds coefficients using given formula
beta <- solve(t(x) %*% x) %*% t(x) %*% y
#calculates degrees of freedom
df <- nrow(data) - ncol(model_frame)
#calculates sigma^2
sigma_2 <- sum(((y - x %*% beta) ^ 2) / df)
#calculates standard error
std_error <- diag(sqrt(sigma_2 * solve((t(x) %*% x))))
#calculates t values
t_val <- beta / std_error
#Calculates Pr(>|t|)
Pr_less_than_abs_t <- 2 * pt(abs(t_val), df, lower.tail = FALSE)
#creates data frame for table
output <- data.frame("Estimate" = c(beta),
"Std. Error" = c(std_error),
"t value" = c(t_val),
"Pr(>|t|)" = c(Pr_less_than_abs_t)
)
#properly labels rownames
rownames(output) <- rownames(beta)
#creates table
library(knitr)
library(kableExtra)
return(kable_styling(kable(output)))
}
#tests my_lm by comparing to lm()
my_lm(test_formula, test_data)
summary(lm(test_formula, test_data))
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
?kable
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
?my_lm
usethis::use_test("my_lm")
testthat::expect_is(my_lm(my_lm(lifeExp ~ gdpPercap, my_gapminder)), data.frame())
testthat::expect_is(my_lm(my_lm(lifeExp ~ gdpPercap, my_gapminder)), "kable")
testthat::expect_is(my_lm(my_lm(lifeExp ~ gdpPercap, my_gapminder)), "data.frame")
testthat::expect_is(my_lm(my_lm(lifeExp ~ gdpPercap, my_gapminder)), "list")
testthat::expect_is((my_lm(lifeExp ~ gdpPercap, my_gapminder), "data.frame")
testthat::expect_is((my_lm(lifeExp ~ gdpPercap, my_gapminder)), "data.frame")
testthat::expect_is((my_lm(lifeExp ~ gdpPercap, na.omit(my_gapminder)), "kable")
testthat::expect_is((my_lm(lifeExp ~ gdpPercap, na.omit(my_gapminder))), "kable")
devtools::document()
devtools::check()
knitr::opts_chunk$set(echo = TRUE)
library(class)
library(tidyverse)
#removes observations with na values
penguins <- na.omit(penguins)
library(palmerpenguins)
data(package = "palmerpenguins")
data(penguins)
library(class)
library(tidyverse)
#removes observations with na values
penguins <- na.omit(penguins)
#removes unnecessary columns from dataset
train <- penguins
train$island <- NULL
train$sex <- NULL
train$year <- NULL
#creates function
my_knn_cv <- function(train, cl, k_nn, k_cv){
#randomly assigns observations to folds
train$fold <- sample(rep(1:k_cv, length = nrow(train)))
#creates column to store prediction for all observations
class <- rep(NA, nrow(train))
#creates vector to store error calculations
misclass_rate <- rep(NA, k_cv)
#uses for loop to repeat steps for each fold
for (i in 1:k_cv) {
#creates train and test data
test_data <- train %>% filter(fold == i)
train_data <- train %>% filter(fold != i)
#creates vector of classes for both data sets
cl_train <- train_data$species
cl_test <- test_data$species
#removes class and fold columns from datasets
train_data <- train_data[ ,3:ncol(train_data)-1]
test_data <- test_data[ ,3:ncol(test_data)-1]
#stores predictions in dataset
class[train$fold == i] <- knn(train_data,
test_data,
cl_train,
k = k_nn,
prob = TRUE)
#creates vector to store misclassifications
error <- rep(NA, nrow(test_data))
#labels misclassifications
for (j in 1:nrow(test_data)) {
error[train$fold == j] =
(as.numeric(train$species[train$fold == j])) != class[train$fold == j]
}
#calculates misclassification rate
misclass_rate[i] <- sum(na.omit(as.numeric(error[train$fold == i])))
misclass_rate[i] <- misclass_rate[i] / length(cl_test)
}
#calculates mean misclassification rate
cv_err <- mean(misclass_rate)
#creates list of objects to return
my_list <- list()
my_list$cv_err <- cv_err
my_list$class <- class
#returns list
return(my_list)
}
#tests function
knn_1 <- my_knn_cv(train, cl, 1, 5)
knn_5 <- my_knn_cv(train, cl, 5, 5)
training_err_1 <- mean((knn_1$class - as.numeric(penguins$species))^2)
training_err_5 <- mean((knn_5$class - as.numeric(penguins$species))^2)
my_data <- data.frame("k_nn" = c(1,5),
"Misclassification Error" = c(knn_1$cv_err, knn_5$cv_err),
"Training Error" = c(training_err_1, training_err_5))
library(knitr)
library(kableExtra)
kable_styling(kable(my_data))
devtools::document()
rm(list = c("my_knn_cv"))
devtools::document()
devtools::check()
usethis::use_pipe()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
length(data.frame("column" = 1:10))
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
usethis::use_test("my_knn_cv")
utils::browseVignettes(package = "STAT302Package")
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
?data
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
?my_rf_cv
devtools::document()
devtools::check()
usethis::use_test("my_rf_cv")
devtools::document()
devtools::check()
?my_rf_cv
devtools::check()
utils::browseVignettes(package = "juanhillon/STAT302Package")
utils::browseVignettes(package = "STAT302Package")
devtools::install_github("juanhillon/STAT302Package", build_vignette = TRUE, build_opts = c())
library(STAT302Package)
utils::browseVignettes(package = "STAT302Package")
devtools::document()
devtools::check()
utils::browseVignettes(package = "STAT302Package")
help(package = "STAT302Package", help_type = "html")
utils::browseVignettes(package = "STAT302Package")
help(package = "STAT302Package", help_type = "html")
utils::browseVignettes(package = "STAT302Package")
my_t.test(x = my_gapminder$lifeExp, alternative = "two.sided", mu = 60)
library(STAT302Package)
my_t.test(x = my_gapminder$lifeExp, alternative = "two.sided", mu = 60)
length(gapminder$lifeExp)
length(my_gapminder$lifeExp)
devtools::document()
devtools::check()
help(package = "STAT302Package", help_type = "html")
utils::browseVignettes(package = "STAT302Package")
library(STAT302Package)
utils::browseVignettes(package = "STAT302Package")
devtools::install_github("juanhillon/STAT302Package", build_vignette = TRUE, build_opts = c())
help(package = "STAT302Package", help_type = "html")
utils::browseVignettes(package = "STAT302Package")
help(package = "STAT302Package", help_type = "html")
library(STAT302Package)
my_lm(lifeExp ~ gdpPercap, my_gapminder)
library(kableExtra)
my_lm(lifeExp ~ gdpPercap, my_gapminder)
formula <- lifeExp ~ gdpPercap
data <- my_gapminder
model_frame <- model.frame(formula, data)
model_frame
x <- model.matrix(formula, data = data)
x
y <- model.response(model_frame)
y
beta <- solve(t(x) %*% x) %*% t(x) %*% y
beta
df <- nrow(data) - ncol(model_frame)
df
sigma_2 <- sum(((y - x %*% beta) ^ 2) / df)
sigma_2
std_error <- diag(sqrt(sigma_2 * solve((t(x) %*% x))))
std_error <- diag(sqrt(pmax(sigma_2 * solve((t(x) %*% x))))
)
solve((t(x) %*% x
)
)
pmax(0, sigma_2 * solve((t(x) %*% x)))))
pmax(0, sigma_2 * solve((t(x) %*% x))))
pmax(0, sigma_2 * solve((t(x) %*% x)))
solve((t(x) %*% x ))
sigma_2 * solve((t(x) %*% x ))
my_solve <- sigma_2 * solve((t(x) %*% x))
my_solve
for (i in nrow(my_solve)) {
for(j in ncol(my_solve))
pmax(0, my_solve[i, j])
}
my_solve
for (i in nrow(my_solve)) {
+     for(j in ncol(my_solve))
+         pmax(0, my_solve[[i, j]])
+ }
for (i in nrow(my_solve)) {
for(j in ncol(my_solve)){
if(my_solve[i, j ] < 0)
my_solve[i,j] = 0
}
}
my_solve
for (i in 1:nrow(my_solve)) {
for(j in 1:ncol(my_solve)){
if(my_solve[i, j ] < 0)
my_solve[i,j] = 0
}
}
my_solve
std_error <- diag(sqrt(my_solve))
std_error
knitr::opts_chunk$set(echo = TRUE)
#loads mtcars data set
data(mtcars)
test_data = mtcars
test_formula = mtcars$mpg ~ mtcars$hp
#creates my_lm function
my_lm <- function(formula, data){
#extracts model frame
model_frame <- model.frame(formula, data)
#extracts model matrix x
x <- model.matrix(formula, data = data)
#extracts model response y
y <- model.response(model_frame)
#finds coefficients using given formula
beta <- solve(t(x) %*% x) %*% t(x) %*% y
#calculates degrees of freedom
df <- nrow(data) - ncol(model_frame)
#calculates sigma^2
sigma_2 <- sum(((y - x %*% beta) ^ 2) / df)
#calculates standard error, after setting negative values to zero
my_solve <- sigma_2 * solve((t(x) %*% x))
for (i in 1:nrow(my_solve)) {
for(j in 1:ncol(my_solve)){
if(my_solve[i, j ] < 0)
my_solve[i,j] = 0
}
}
std_error <- diag(sqrt(my_solve))
#calculates t values
t_val <- beta / std_error
#Calculates Pr(>|t|)
Pr_less_than_abs_t <- 2 * pt(abs(t_val), df, lower.tail = FALSE)
#creates data frame for table
output <- data.frame("Estimate" = c(beta),
"Std. Error" = c(std_error),
"t value" = c(t_val),
"Pr(>|t|)" = c(Pr_less_than_abs_t)
)
#properly labels rownames
rownames(output) <- rownames(beta)
#creates table
library(knitr)
library(kableExtra)
return(kable_styling(kable(output)))
}
#tests my_lm by comparing to lm()
my_lm(test_formula, test_data)
summary(lm(test_formula, test_data))
lm(formula, data)
my_lm(formula, data)
summary(lm(formula, data))
devtools::document()
library(STAT302Package)
devtools::document()
rm(list = c("data", "my_lm"))
devtools::document()
devtools::document()
devtools::check()
?kable
devtools::check()
devtools::check()
devtools::check()
devtools::check()
my_lm(lifeExp ~ gdpPercap, my_gapminder)
devtools::document()
devtools::check()
testthat::expect_equal(df, nrow(data) - ncol(model_frame))
testthat::expect_gt(my_lm("lifeExp ~ gdpPercap", my_gapminder)$df, 0)
testthat::expect_gt(df, 0)
testthat::expect_is(my_lm("lifeExp ~ gdpPercap", "table")
)
testthat::expect_is(my_lm("lifeExp ~ gdpPercap", my_gapminder), "table")
testthat::expect_is(my_lm("lifeExp ~ gdpPercap", my_gapminder), "table")
devtools::check()
sample_output <- my_lm("lifeExp ~ gdpPercap", my_gapminder)
